{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.jsx","serviceWorker.js","index.js"],"names":["Card","name","email","className","alt","src","CardList","robots","map","robot","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","React","Component","App","useState","search","updateSearch","setRobot","a","fetch","json","then","res","catch","err","console","log","useEffect","fetchData","filteredRobots","filter","toLowerCase","includes","length","event","newSearch","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4QAgBeA,EAdF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACpB,OACE,yBAAKC,UAAU,oDACb,yBACEC,IAAI,SACJC,IAAK,wBAA0BJ,EAAOC,EAAQ,aAEhD,6BACE,gCAAMD,EAAN,KADF,IACoB,+BAAKC,EAAL,QCMXI,EAbE,SAAC,GAIhB,OAJ6B,EAAZC,OAIHC,KAAI,SAACC,GACjB,OAAO,kBAAC,EAAD,CACPC,IAAKD,EAAME,GACXV,KAAMQ,EAAMR,KACZC,MAAOO,EAAMP,YCIFU,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,6BACE,2BACEV,UAAU,uCACVW,KAAK,SACLC,YAAY,eACZC,SAAUH,MCHHI,EAJA,SAACC,GACd,OAAQ,yBAAKC,MAAO,CAACC,SAAU,OAAQC,OAAQ,kBAAmBC,OAAQ,UAAWJ,EAAMK,W,4BCsB9EC,E,kDAtBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CAAEC,UAAU,GAFR,E,8DAKDC,EAAOC,GAIvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SAEN,sDAGFG,KAAKX,MAAMK,a,GAnBMQ,IAAMC,WC2CnBC,G,MAtCH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACTC,EADS,KACDC,EADC,OAEWF,mBAAS,IAFpB,mBAET3B,EAFS,KAED8B,EAFC,iDAShB,sBAAAC,EAAA,sEACoBC,MAAM,8CAD1B,cAGKC,OACAC,MAAK,SAAAC,GAAQL,EAASK,MACtBC,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,MAL/B,4CATgB,sBAiBhBG,qBAAU,YAjBM,mCAkBdC,MAGF,IAAMC,EAAiB1C,EAAO2C,QAAO,SAACzC,GACpC,OAAOA,EAAMR,KAAKkD,cAAcC,SAASjB,EAAOgB,kBAIhD,OAAQ5C,EAAO8C,OACb,yBAAKlD,UAAU,MACb,wBAAIA,UAAU,MAAd,iBADF,IACwC,kBAAC,EAAD,CAAWU,aAxBvD,SAAwByC,GACtB,IAAMC,EAAYD,EAAME,OAAOC,MAC/BrB,EAAamB,MAuBT,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUhD,OAAQ0C,OALA,2C,MCrBRS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd7B,OAAM,SAAAhB,GACLkB,QAAQlB,MAAMA,EAAM8C,c","file":"static/js/main.ebcdb1c6.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email }) => {\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        alt=\"robots\"\n        src={\"https://robohash.org/\" + name + email + \"?200x200\"}\n      />\n      <div>\n        <h2> {name} </h2> <p> {email} </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n  // if (true) {\n  //   throw new Error(\"NOOO!\")\n  // }\n  return robots.map((robot) => {\n    return <Card\r\n    key={robot.id}\r\n    name={robot.name}\r\n    email={robot.email}\r\n    />;\n  });\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div>\n      <input\r\n        className=\"bg-lightest-blue pa3 mb3 ba b--green\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robot\"\r\n        onChange={searchChange}\r\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (<div style={{overflow: \"auto\", border: \"2px solid black\", height: \"565px\"}}>{props.children}</div>);\r\n}\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    // You can also log the error to an error reporting service\r\n    // logErrorToMyService(error, errorInfo);\r\n\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return <h1>A WILD ERROR APPEAR!!!</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [search, updateSearch] = useState(\"\");\r\n  const [robots, setRobot] = useState([]);\r\n\r\n  function onSearchChange(event) {\r\n    const newSearch = event.target.value;\r\n    updateSearch(newSearch);\r\n  }\r\n\r\n  async function fetchData() {\r\n    const res = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    res\r\n      .json()\r\n      .then(res => {setRobot(res)})\r\n      .catch(err => {console.log(err)})\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  });\r\n\r\n  const filteredRobots = robots.filter((robot) => {\r\n    return robot.name.toLowerCase().includes(search.toLowerCase());\r\n  });\r\n\r\n\r\n    return !robots.length ? <h1> LOADING </h1> :\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\"> ROBOFRIENDS </h1> <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n          <CardList robots={filteredRobots} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}